"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4841],{25535:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"project/2025/mihai.turcu/index","title":"Railway Simulator Safe System","description":"Railway Simulator","source":"@site/versioned_docs/version-fils_en/project/2025/mihai.turcu/index.md","sourceDirName":"project/2025/mihai.turcu","slug":"/project/2025/mihai.turcu/","permalink":"/docs/fils_en/project/2025/mihai.turcu/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-fils_en/project/2025/mihai.turcu/index.md","tags":[],"version":"fils_en","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Plant Guardian","permalink":"/docs/fils_en/project/2025/mihai.sirbu0204/"},"next":{"title":"Smart Chess","permalink":"/docs/fils_en/project/2025/mihai_cezar.tintareanu_mircea/"}}');var i=r(74848),n=r(28453);const o={},a="Railway Simulator Safe System",d={},l=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Log",id:"log",level:2},{value:"Week 28 April - 4 May",id:"week-28-april---4-may",level:3},{value:"Week 5 - 11 May",id:"week-5---11-may",level:3},{value:"Week 12 - 18 May",id:"week-12---18-may",level:3},{value:"Week 19 - 25 May",id:"week-19---25-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function c(e){const t={a:"a",admonition:"admonition",br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"railway-simulator-safe-system",children:"Railway Simulator Safe System"})}),"\n",(0,i.jsx)(t.p,{children:"Railway Simulator"}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.mdxAdmonitionTitle,{}),(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Author"}),": Turcu Mihai Alexandru",(0,i.jsx)(t.br,{}),"\n",(0,i.jsx)(t.strong,{children:"GitHub Project Link"}),": ",(0,i.jsx)(t.a,{href:"https://github.com/UPB-PMRust-Students/project-mihai-alex-71",children:"https://github.com/UPB-PMRust-Students/project-mihai-alex-71"})]})]}),"\n",(0,i.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(t.p,{children:"This project is a railway crossing simulator developed using the Rust programming language and two Raspberry Pi Pico 2 microcontrollers\u2014one dedicated to system control and the other used as a debugger. The system employs two ultrasonic proximity sensors to detect the approach and passage of a train. When a train is detected, servo motors lower the crossing barriers, and both a light and sound signal are activated to warn nearby pedestrians and vehicles. The motion sensors are also used to estimate the speed of the train, based on the number of cars it consists of. This simulation offers a simple yet effective way to demonstrate how real-world railway safety systems operate."}),"\n",(0,i.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(t.p,{children:"The goal of this project was to simulate a real-world railway crossing system using low-cost and accessible hardware. By combining Rust's performance and safety features with the versatility of the Raspberry Pi Pico 2, I aimed to deepen my understanding of embedded systems, sensor integration, and real-time control. This project also allowed me to explore practical applications of automation in transportation safety."}),"\n",(0,i.jsx)(t.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Schematic diagram",src:r(71955).A+"",width:"287",height:"368"})}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Train Detection Module\nFunction: Detects whether a train is approaching or has passed using two ultrasonic sensors placed at different points on the track.\nOutput: Sends proximity data to the Control Module."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:'Speed Estimation Module\nFunction: Calculates the speed of the train and estimates the number of cars based on the time difference between the sensor triggers.\nInput: Data from both ultrasonic sensors.\nOutput: Speed and train state (e.g., "approaching", "passed") sent to the Control Module.'}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Control Module\nFunction: Core logic running on the main Raspberry Pi Pico 2. It processes sensor data, calculates train speed and state, and controls all other modules.\nInput: Proximity and speed data.\nOutput:\nSends display data to the OLED Display Module\nSends actuation commands to the Barrier & Signal Module\nCommunicates system state to the Debug Module"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Barrier & Signal Module\nFunction: Controls the crossing barriers (via servo motors), LED warning lights, and acoustic buzzer."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:'OLED Display Module\nFunction: Displays current system status:\nTrain state (e.g., "no train", "approaching", "passing")\nEstimated speed\nBarrier state\nInput: Data from the Control Module via I2C/SPI.'}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Debug Module\nFunction: Logs and monitors system states and sensor values.\nPlatform: Second Raspberry Pi Pico 2 connected to the main controller."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Connections Overview:\nUltrasonic Sensors \u2192 Control Module: via GPIO (Trigger/Echo)\nControl Module \u2194 OLED Display: via I2C or SPI\nControl Module \u2192 Servos/LEDs/Buzzer: via GPIO/PWM\nControl Module \u2194 Debug Module: via UART/I2C/SPI"}),"\n",(0,i.jsx)(t.h2,{id:"log",children:"Log"}),"\n",(0,i.jsx)(t.p,{children:"I have focused on the research phase\u2014reading documentation, watching tutorials to understand component wiring, and setting up the debugger on one Raspberry Pi Pico."}),"\n",(0,i.jsx)(t.h3,{id:"week-28-april---4-may",children:"Week 28 April - 4 May"}),"\n",(0,i.jsx)(t.p,{children:"This week I started working on my documentation. I have been researching how different sensors operate and how to integrate and connect them, and I\u2019ve been thinking about how to combine everything into a fully automated system."}),"\n",(0,i.jsx)(t.h3,{id:"week-5---11-may",children:"Week 5 - 11 May"}),"\n",(0,i.jsx)(t.p,{children:"First week of starting coding and the hardest, I spent a lot of time solving the mystery of the HC-SR04"}),"\n",(0,i.jsx)(t.h3,{id:"week-12---18-may",children:"Week 12 - 18 May"}),"\n",(0,i.jsx)(t.p,{children:"This was my first\u2014and hardest\u2014week of coding, but the real mystery was on the hardware side. I wasn\u2019t sure how to create a proper voltage divider for the HC-SR04\u2019s Echo line. Some tutorials suggested using a MOSFET level-shifter, but in the end I went with a simple resistor voltage divider because the Echo signal from the sensor is already low enough for the Raspberry Pi Pico\u2019s 3.3 V GPIO. After sorting that out, I connected the HC-SR04 to the Pico, read the distance to obstacles, and synchronized an LED\u2014red when something is detected, white when nothing is in range."}),"\n",(0,i.jsx)(t.h3,{id:"week-19---25-may",children:"Week 19 - 25 May"}),"\n",(0,i.jsx)(t.p,{children:"This past week I integrated a display for message output and connected two servo motors that activate when an object is detected\u2014simulating a train\u2019s arrival and lowering the crossing barriers. Detection by the first HC-SR04 sensor turns off the white LED, switches on the red LED, and triggers a buzzer for an audible warning. Once the train passes the second HC-SR04 sensor, the barriers rise again, the white LED turns back on, the red LED switches off, and the buzzer falls silent."}),"\n",(0,i.jsx)(t.h2,{id:"hardware",children:"Hardware"}),"\n",(0,i.jsx)(t.p,{children:"The project uses two Raspberry Pi Pico 2 boards (one as debugger), ultrasonic proximity sensors to detect the train, servo motors to control the barriers, LEDs and a buzzer for signals, an OLED display to show status and speed."}),"\n",(0,i.jsx)(t.h3,{id:"schematics",children:"Schematics"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Schematic diagram",src:r(18999).A+"",width:"1123",height:"794"})}),"\n",(0,i.jsx)(t.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Device"}),(0,i.jsx)(t.th,{children:"Usage"}),(0,i.jsx)(t.th,{children:"Price"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html",children:"Raspberry Pi Pico W"})}),(0,i.jsx)(t.td,{children:"Main microcontroller for processing and control"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/12394-raspberry-pi-pico-w.html",children:"35 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.electronicshub.org/hc-sr04-ultrasonic-sensor/",children:"Ultrasonic Proximity Sensors (HC-SR04)"})}),(0,i.jsx)(t.td,{children:"Detect train approach and passage"}),(0,i.jsx)(t.td,{children:"~12 RON each"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/motors/898-servomotor-towerpro-sg90-9g.html",children:"Servo Motor (SG90)"})}),(0,i.jsx)(t.td,{children:"Control railway barriers"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/motors/898-servomotor-towerpro-sg90-9g.html",children:"15 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/displays/916-display-oled-128x64-pixel-i2c-096-inch.html",children:"OLED Display (SSD1306)"})}),(0,i.jsx)(t.td,{children:"Displays train status and speed"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/displays/916-display-oled-128x64-pixel-i2c-096-inch.html",children:"25 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/input-devices/2765-joystick-module.html",children:"Joystick Module"})}),(0,i.jsx)(t.td,{children:"Manual control of barriers"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/input-devices/2765-joystick-module.html",children:"10 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/audio-devices/967-active-buzzer-module.html",children:"Buzzer"})}),(0,i.jsx)(t.td,{children:"Acoustic signal when train approaches"}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://www.optimusdigital.ro/en/audio-devices/967-active-buzzer-module.html",children:"5 RON"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"LEDs (Red and Green)"}),(0,i.jsx)(t.td,{children:"Visual indicators for crossing status"}),(0,i.jsx)(t.td,{children:"~1 RON each"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Resistors (220\u03a9)"}),(0,i.jsx)(t.td,{children:"For LEDs current limiting"}),(0,i.jsx)(t.td,{children:"~0.5 RON each"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Jumper Wires"}),(0,i.jsx)(t.td,{children:"Connecting components"}),(0,i.jsx)(t.td,{children:"~10 RON (set)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"USB Cable"}),(0,i.jsx)(t.td,{children:"Power and programming"}),(0,i.jsx)(t.td,{children:"-"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Optional External Power Supply"}),(0,i.jsx)(t.td,{children:"Extra power for servo motor"}),(0,i.jsx)(t.td,{children:"Optional"})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"software",children:"Software"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Library"}),(0,i.jsx)(t.th,{children:"Description"}),(0,i.jsx)(t.th,{children:"Usage"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/almindor/st7789",children:"st7789"})}),(0,i.jsx)(t.td,{children:"Display driver for ST7789"}),(0,i.jsx)(t.td,{children:"Used for the display for the Pico Explorer Base"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://github.com/embedded-graphics/embedded-graphics",children:"embedded-graphics"})}),(0,i.jsx)(t.td,{children:"2D graphics library"}),(0,i.jsx)(t.td,{children:"Used for drawing to the display"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://docs.rs/rp-pico/latest/rp_pico/",children:"rp-pico"})}),(0,i.jsx)(t.td,{children:"Board support crate for Raspberry Pi Pico"}),(0,i.jsx)(t.td,{children:"Main framework for controlling the Pico"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.a,{href:"https://docs.rs/rp2040-hal/latest/rp2040_hal/",children:"rp2040-hal"})}),(0,i.jsx)(t.td,{children:"HAL for the RP2040 microcontroller"}),(0,i.jsx)(t.td,{children:"Controls GPIO, ADC, PWM, I2C, etc."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"links",children:"Links"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.tomshardware.com/how-to/ultrasonic-sensor-raspberry-pi-pico",children:"Ultrasonic sensor guide"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://dronebotworkshop.com/servo-motors/",children:"Servo motor guide"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.rust-embedded.org/book/",children:"Rust Book"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://electrocredible.com/oled-display-raspberry-pi-pico-i2c-micropython/",children:"Oled Display guide"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://maker.pro/raspberry-pi/projects/raspberry-pi-pico-analog-joystick-interfacing",children:"Joystick guide"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.hackster.io/news/automatic-railway-crossing-system-f6edcc3560f9",children:"Tutorial"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},71955:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/1project-c24fd91df4fb5599b196c5b516f0c1e2.webp"},18999:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/KiCad-c4845462bfb68c0b6770ed0882b2ee3d.svg"},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var s=r(96540);const i={},n=s.createContext(i);function o(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);