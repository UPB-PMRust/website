"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4957],{32280:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"project/2025/roi.bachynskyi/index","title":"VitalPi","description":"Meet Your Personal Health Guardian - Real-time Vital Monitoring at Your Fingertips","source":"@site/versioned_docs/version-fils_en/project/2025/roi.bachynskyi/index.md","sourceDirName":"project/2025/roi.bachynskyi","slug":"/project/2025/roi.bachynskyi/","permalink":"/docs/fils_en/project/2025/roi.bachynskyi/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-fils_en/project/2025/roi.bachynskyi/index.md","tags":[],"version":"fils_en","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Autonomous maze solving robot","permalink":"/docs/fils_en/project/2025/richard.velici/"},"next":{"title":"Lil-console","permalink":"/docs/fils_en/project/2025/sarah.simion/"}}');var t=i(74848),n=i(28453);const d={},a="VitalPi",c={},l=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Schematics",id:"schematics",level:3},{value:"Log",id:"log",level:2},{value:"Week 5 - 11 May",id:"week-5---11-may",level:3},{value:"Week 12 - 18 May",id:"week-12---18-may",level:3},{value:"Week 19 - 25 May",id:"week-19---25-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics-1",level:3},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Software Design",id:"software-design",level:3},{value:"Architecture Overview",id:"architecture-overview",level:4},{value:"Core Components",id:"core-components",level:4},{value:"State Management",id:"state-management",level:4},{value:"Real-time Capabilities",id:"real-time-capabilities",level:4},{value:"Software Diagram",id:"software-diagram",level:3},{value:"Links",id:"links",level:2}];function o(e){const s={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"vitalpi",children:"VitalPi"})}),"\n",(0,t.jsx)(s.p,{children:"Meet Your Personal Health Guardian - Real-time Vital Monitoring at Your Fingertips"}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsx)(s.mdxAdmonitionTitle,{}),(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Author"}),": Bachynskyi Roi ",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"GitHub Project Link"}),": ",(0,t.jsx)(s.a,{href:"https://github.com/UPB-PMRust-Students/project-frihetselsker",children:"https://github.com/UPB-PMRust-Students/project-frihetselsker"})]})]}),"\n",(0,t.jsx)(s.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(s.p,{children:"It is a stationary health station featuring body temperature, ECG, and air quality sensors allowing evaluate your wellness from home. The system provides immediate notifications and results on site, while transmitting health data wirelessly to the server for remote monitoring and better view."}),"\n",(0,t.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,t.jsx)(s.p,{children:"I chose VitalPi to democratize healthcare monitoring, making vital health data accessible to everyone regardless of location or resources. This solution brings decent health monitoring into homes and underserved communities potentially improving health outcomes for those with limited access to regular medical care."}),"\n",(0,t.jsx)(s.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(s.h3,{id:"schematics",children:"Schematics"}),"\n",(0,t.jsx)(s.p,{children:"This diagram reflects the concept of connections of every part in this project."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Architecture",src:i(24222).A+"",title:"VitalPi Architecture"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Raspberry Pi Pico 2W"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Central controller for the entire health station system"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO pins for all sensors, display, LED, and buzzer"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Collects data from sensors, processes readings, manages notifications, and sends data to server"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Touchscreen Display"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," SPI"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," User interface for health monitoring station"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO10 - 13, GPIO16 - 22"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Displays real-time health metrics, allows user interaction with the system"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Temperature Sensor"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," I2C"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Monitors body or ambient temperature"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO14 and GPIO15"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Provides temperature readings for health assessment"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Air Quality Sensor"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," ADC"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Detects air pollutants, VOCs, or specific gases"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO27(ADC1)"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Monitors environmental air quality that could affect health"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"ECG Sensor"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," ADC"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Captures electrical signals from the heart"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO26(ADC0)"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Records cardiac activity for heart health monitoring"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"BPE-SpO2 Sensor:"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," I2C"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Measures blood oxygen saturation and pulse rate"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO8 and GPIO9"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Monitors oxygen levels in blood and heart rate, critical vital signs for overall health assessment"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"RGB LED"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," PWM"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Visual notification system"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO2, GPIO3, and GPIO4 with current-limiting resistors"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Color-coded alerts based on sensor readings"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Passive Buzzer"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," PWM"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Audible notification system"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Connections:"})," GPIO28"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Sounds alerts"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Web Application"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Interface:"})," Wi-Fi"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Role:"})," Data visualization and remote monitoring interface"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Features:"})," Displays historical data trends, allows data export for medical professionals"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:"Function:"})," Provides accessible interface for viewing health data"]}),"\n",(0,t.jsx)(s.h2,{id:"log",children:"Log"}),"\n",(0,t.jsx)(s.h3,{id:"week-5---11-may",children:"Week 5 - 11 May"}),"\n",(0,t.jsx)(s.p,{children:"I imported all my work-in-progress materials to the project's repository where every component was tested except MAX30102, which I was trying to replace that time. I made all the connections with respect to the uploaded KiCAD schematics."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"HardwareWeek1",src:i(83369).A+"",width:"1024",height:"768"})}),"\n",(0,t.jsx)(s.h3,{id:"week-12---18-may",children:"Week 12 - 18 May"}),"\n",(0,t.jsx)(s.p,{children:"My goal was to unify all the code that I had had before and make one program with several tasks from it. What is more, I have started to work on the UI of the project. The biggest issue I faced was handling the signal from BPE sensor which was too difficult to set up."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"HardwareWeek2",src:i(89100).A+"",width:"1024",height:"768"})}),"\n",(0,t.jsx)(s.h3,{id:"week-19---25-may",children:"Week 19 - 25 May"}),"\n",(0,t.jsx)(s.p,{children:"During the final week, I managed to connect every single component to the holistic system, wrapped it into a convenient box. I faced some problems with Wi-Fi and PubSubChannels, but now it works and can be used by a user."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"HardwareWeek3",src:i(80335).A+"",width:"1024",height:"768"})}),"\n",(0,t.jsx)(s.h2,{id:"hardware",children:"Hardware"}),"\n",(0,t.jsx)(s.p,{children:"VitalPi utilizes a Raspberry Pi Pico 2W microcontroller as its processing core and webbite communicator, paired with a TFT LCD touchscreen (240\xd7320px) for user interaction. Health monitoring is provided through an AD8232 ECG sensor module for cardiac activity, an MLX90614ESF infrared temperature sensor for contactless temperature readings, and a GY-MAX30102 optical heart rate and blood oxygen sensor. Environmental monitoring comes from an MQ135 gas sensor configured with a 10k\u03a9/20k\u03a9 resistor voltage divider. User notifications are delivered via an RGB LED (with 220\u03a9 current-limiting resistors) for visual alerts and a passive buzzer for audible warnings."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Hardware",src:i(80335).A+"",width:"1024",height:"768"})}),"\n",(0,t.jsx)(s.h3,{id:"schematics-1",children:"Schematics"}),"\n",(0,t.jsx)(s.p,{children:"This is the KiCad Schematics of the project."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"KiCAD Schematics",src:i(78297).A+"",width:"1123",height:"794"})}),"\n",(0,t.jsx)(s.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Device"}),(0,t.jsx)(s.th,{children:"Usage"}),(0,t.jsx)(s.th,{children:"Price"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html",children:"Raspberry Pi Pico 2W"})}),(0,t.jsx)(s.td,{children:"The microcontroller that processes all sensor data and manages wireless connectivity"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/12394-raspberry-pi-pico-w.html",children:"35 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"http://www.lcdwiki.com/2.4inch_SPI_Module_ILI9341_SKU:MSP2402",children:'2.4" TFT LCD Touchscreen (240\xd7320px)'})}),(0,t.jsx)(s.td,{children:"User interface display for viewing health data and interacting with the system"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.emag.ro/display-tactil-tft-lcd-240-x-320-px-cu-cititor-sd-spi-2-4-inch-gri-rosu-tft-24-ili9341-restouch-spi/pd/D49CJMYBM/?utm_campaign=share_product&utm_source=mobile_dynamic_share&utm_medium=android",children:"54 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.melexis.com/en/product/MLX90614/Digital-Plug-Play-Infrared-Thermometer-TO-Can",children:"MLX90614ESF Infrared Temperature Sensor"})}),(0,t.jsx)(s.td,{children:"Non-contact temperature measurement for body and ambient temperature monitoring"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/temperature-sensors/138-mlx90614esf-infrared-temperature-sensor.html?gad_source=1&gclid=Cj0KCQjwoNzABhDbARIsALfY8VP4KOk-uamBw2aAAHJ--2XHtenjYjfFNSvu1_ldMD97vs0Ro4AwfvkaAomFEALw_wcB",children:"60 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://www.analog.com/media/en/technical-documentation/data-sheets/ad8232.pdf&ved=2ahUKEwivq-_73YmNAxWgSfEDHfFSNnEQFnoECCEQAQ&usg=AOvVaw1ZekMJX-ZT0NP6lisc-KfI",children:"AD8232 ECG Sensor Module"})}),(0,t.jsx)(s.td,{children:"Single-lead electrocardiogram sensor for heart activity monitoring and analysis"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://www.optimusdigital.ro/en/others/1347-modul-senzor-ecg-ad8232.html%3Fsrsltid%3DAfmBOoq7ktMvGHH3i34NuyOIysD9tOLrn9shzC3jfg7yPPLJ9DLfWkmG&ved=2ahUKEwjU0LKh3omNAxUTRPEDHaxjITIQFnoECCYQAQ&usg=AOvVaw3B14kha6sXv0jADqs4gqSQ",children:"35 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.olimex.com/Products/Components/Sensors/Gas/SNS-MQ135/resources/SNS-MQ135.pdf",children:"MQ135 Gas Sensor"})}),(0,t.jsx)(s.td,{children:"Air quality detection for monitoring harmful gases and environmental conditions"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.bitmi.ro/modul-senzor-calitate-aer-mq135-10423.html?gad_source=1&gclid=Cj0KCQjwoNzABhDbARIsALfY8VMkJt8lr23lYsZGiwqCjhqz0_K5gn6aomgZT2sPRCyjlESzoN40NHAaAshEEALw_wcB",children:"16 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.instructables.com/Guide-to-Using-MAX30102-Heart-Rate-and-Oxygen-Sens/",children:"Breakout heart rate sensor GY-MAX30102"})}),(0,t.jsx)(s.td,{children:"Pulse oximetry sensor for monitoring blood oxygen levels and heart rate"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.emag.ro/breakout-senzor-ritm-cardiac-robofun-gy-max30102-pentru-arduino-00005330/pd/DJQVF1YBM/",children:"14 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.handsontec.com/dataspecs/module/passive%20buzzer.pdf",children:"Passive Buzzer Module"})}),(0,t.jsx)(s.td,{children:"Audio notification system for alerts and warnings"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/electronic-components/12598-passive-buzzer-module.html",children:"2 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.mouser.com/catalog/specsheets/Soldered_100105%205mm%20RGB%20LED%20diode%20common%20cathode.pdf?srsltid=AfmBOooEda5-sqCRuQ-qNjnFkSjChamOBkOXMJI-_FxKITltrbbSo-8I",children:"RGB LED Common Cathode"})}),(0,t.jsx)(s.td,{children:"Visual status indicator showing system and health conditions through color coding"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/leds/483-rgb-led-common-cathode.html?srsltid=AfmBOoqqRw8qCkA0KuLfmskkMIM2O0KJjFAchG4kDGp_oNTNVTboTiOw",children:"1 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/10958-05w-220-resistor.html",children:"3 x 220\u03a9 Resistors"})}),(0,t.jsx)(s.td,{children:"Current-limiting components for the RGB LED"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/10958-05w-220-resistor.html",children:"0,30 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/859-025w-1k-resistor.html?srsltid=AfmBOopYUKWi3_R7jO7hJJaGlh9ly_XcDNCyIgR8xsUILaELgU_VR-Gc",children:"1 k\u03a9 Resistor"})}),(0,t.jsx)(s.td,{children:"Component of voltage divider for MQ135 gas sensor"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/859-025w-1k-resistor.html?srsltid=AfmBOopYUKWi3_R7jO7hJJaGlh9ly_XcDNCyIgR8xsUILaELgU_VR-Gc",children:"0,10 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/851-025w-22k-resistor.html?srsltid=AfmBOorNykvdmztfEqMvz_hlfJonyaACrUh2bPOsvN76Xk9tm9VrWeT7",children:"2 k\u03a9 Resistor"})}),(0,t.jsx)(s.td,{children:"Component of voltage divider for MQ135 gas sensor"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/resistors/851-025w-22k-resistor.html?srsltid=AfmBOorNykvdmztfEqMvz_hlfJonyaACrUh2bPOsvN76Xk9tm9VrWeT7",children:"0,10 RON"})})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"software",children:"Software"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Library"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Usage"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-rp"})}),(0,t.jsx)(s.td,{children:"Embassy support for Raspberry Pi RP2350"}),(0,t.jsx)(s.td,{children:"Runs async embedded tasks on Raspberry Pi Pico 2W"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-embedded-hal"})}),(0,t.jsx)(s.td,{children:"Async implementation of embedded-hal traits"}),(0,t.jsx)(s.td,{children:"Interfaces with async-compatible embedded peripherals"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-sync"})}),(0,t.jsx)(s.td,{children:"Synchronization primitives for async embedded Rust"}),(0,t.jsx)(s.td,{children:"Used for mutexes, signals, and channels in concurrent tasks"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-executor"})}),(0,t.jsx)(s.td,{children:"Async task executor for bare-metal embedded systems"}),(0,t.jsx)(s.td,{children:"Manages scheduling and running async tasks on the device"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-futures"})}),(0,t.jsx)(s.td,{children:"Lightweight async utilities for embedded systems"}),(0,t.jsx)(s.td,{children:"Provides futures and combinators used in async workflows"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-time"})}),(0,t.jsx)(s.td,{children:"Timekeeping and delays for embedded systems"}),(0,t.jsx)(s.td,{children:"Used for timers, delays, and task timeouts"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-net"})}),(0,t.jsx)(s.td,{children:"Async TCP/IP networking stack"}),(0,t.jsx)(s.td,{children:"Handles communication between device and remote server"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-net-wiznet"})}),(0,t.jsx)(s.td,{children:"Wiznet W5500 Ethernet driver for Embassy"}),(0,t.jsx)(s.td,{children:"Provides Ethernet connectivity support"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"cyw43"})}),(0,t.jsx)(s.td,{children:"Driver for the CYW43 Wi-Fi chip"}),(0,t.jsx)(s.td,{children:"Provides Wi-Fi connectivity to the Raspberry Pi Pico 2W"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"cyw43-pio"})}),(0,t.jsx)(s.td,{children:"PIO-based CYW43 driver implementation"}),(0,t.jsx)(s.td,{children:"Allows communication with CYW43 via the Pico's PIO"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/knurling-rs/defmt",children:"defmt"})}),(0,t.jsx)(s.td,{children:"Logging framework optimized for embedded devices"}),(0,t.jsx)(s.td,{children:"Used for low-overhead logging during debugging"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/knurling-rs/defmt",children:"defmt-rtt"})}),(0,t.jsx)(s.td,{children:"Backend for defmt using RTT (Real-Time Transfer)"}),(0,t.jsx)(s.td,{children:"Enables real-time logging over debug probe"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/rust-embedded/cortex-m",children:"cortex-m-rt"})}),(0,t.jsx)(s.td,{children:"Runtime for Cortex-M microcontrollers"}),(0,t.jsx)(s.td,{children:"Sets up interrupt vectors and program entry point"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/knurling-rs/defmt",children:"panic-probe"})}),(0,t.jsx)(s.td,{children:"Panic handler for defmt-enabled embedded apps"}),(0,t.jsx)(s.td,{children:"Captures and displays panics for debugging"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal-async"})}),(0,t.jsx)(s.td,{children:"Asynchronous embedded-hal traits"}),(0,t.jsx)(s.td,{children:"Defines async traits for interacting with hardware"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/therealprof/display-interface",children:"display-interface-spi"})}),(0,t.jsx)(s.td,{children:"SPI interface for display drivers"}),(0,t.jsx)(s.td,{children:"Provides abstraction for SPI-based display communication"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/yuri91/ili9341-rs",children:"ili9341"})}),(0,t.jsx)(s.td,{children:"Driver for ILI9341 LCD display controller"}),(0,t.jsx)(s.td,{children:"Enables graphics output to ILI9341-based displays"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/rust-embedded/heapless",children:"heapless"})}),(0,t.jsx)(s.td,{children:"Data structures that don't require dynamic memory"}),(0,t.jsx)(s.td,{children:"Used for buffers and queues with guaranteed memory use"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/nullstalgia/mff-hr-v1/tree/master/xpt2046",children:"xpt2046"})}),(0,t.jsx)(s.td,{children:"Touchscreen driver for XPT2046"}),(0,t.jsx)(s.td,{children:"Reads user input from resistive touchscreen displays"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/tarcieri/micromath",children:"micromath"})}),(0,t.jsx)(s.td,{children:"Lightweight math library for microcontrollers"}),(0,t.jsx)(s.td,{children:"Used for computations like ECG signal processing"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/eldruin/mlx9061x-rs",children:"mlx9061x"})}),(0,t.jsx)(s.td,{children:"Driver for MLX90614 temperature sensor"}),(0,t.jsx)(s.td,{children:"Used for contactless infrared temperature measurement"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embedded-graphics/embedded-graphics",children:"embedded-graphics"})}),(0,t.jsx)(s.td,{children:"2D graphics library"}),(0,t.jsx)(s.td,{children:"Used for drawing to the display"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/static-cell",children:"static_cell"})}),(0,t.jsx)(s.td,{children:"Statically allocated, initialized at runtime cell"}),(0,t.jsx)(s.td,{children:"Provides safe static storage for async resources"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/rust-embedded/embedded-io",children:"embedded-io-async"})}),(0,t.jsx)(s.td,{children:"Async I/O traits for embedded systems"}),(0,t.jsx)(s.td,{children:"Enables async I/O operations for networking and communication"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"software-design",children:"Software Design"}),"\n",(0,t.jsx)(s.h4,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,t.jsx)(s.p,{children:"The software follows an async task-based architecture using the Embassy framework. The application is structured around independent async tasks that communicate through publish-subscribe channels and simple channels, enabling real-time sensor monitoring while maintaining responsive user interaction."}),"\n",(0,t.jsx)(s.h4,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Task Architecture"})}),"\n",(0,t.jsx)(s.p,{children:"The system implements eight primary async tasks, each responsible for specific functionality:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"main"})})," - System initialization and task spawning"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"wifi_task"})})," - Network communication and cloud data transmission"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"display_task"})})," - User interface state machine and touchscreen handling"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"led_task"})})," - Visual feedback system with color-coded health indicators"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"buzzer_task"})})," - Audio notification system for alerts and confirmations"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"temp_task"})})," - Temperature sensor monitoring via I\xb2C"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"adc_task"})})," - ECG measurement using AD8232 sensor and Air Quality measurement using MQ135 sensor"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"bpm_task"})})," - BPM and Saturation measurement using MAX30102 via I\xb2C"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Communication System"})}),"\n",(0,t.jsxs)(s.p,{children:["Inter-task communication is handled through Embassy's ",(0,t.jsx)(s.strong,{children:"publish-subscribe channels"}),". This decoupled architecture allows tasks to operate independently while coordinating through standardized ",(0,t.jsx)(s.code,{children:"Command"})," messages that specify source device, target device, and requested action. The data is sent via simple ",(0,t.jsx)(s.strong,{children:"channels"})," to ensure that it has been transfered successfully."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Device Abstraction"})}),"\n",(0,t.jsxs)(s.p,{children:["Hardware interfaces are abstracted through the ",(0,t.jsx)(s.strong,{children:"pins module"}),", which groups related GPIO pins into logical bundles. This abstraction simplifies hardware management and enables clean separation between hardware configuration and application logic."]}),"\n",(0,t.jsx)(s.h4,{id:"state-management",children:"State Management"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Display State Machine"})}),"\n",(0,t.jsx)(s.p,{children:"The user interface operates as a comprehensive state machine with states for each measurement workflow:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Startup sequence"})," with visual/audio feedback"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Main menu"})," for measurement selection"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Measurement states"})," (ECG, pulse/SpO\u2082, temperature, air quality)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Data transmission states"})," with cloud upload feedback"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Success/failure states"})," with retry capabilities"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Sensor Data Flow"})}),"\n",(0,t.jsx)(s.p,{children:"Sensor readings follow a standardized pipeline:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Measurement initiation"})," through display commands"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Data collection"})," by dedicated sensor tasks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Processing and validation"})," within sensor-specific logic"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Display presentation"})," with health status indicators"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Cloud transmission"})," via WiFi with success confirmation"]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"real-time-capabilities",children:"Real-time Capabilities"}),"\n",(0,t.jsxs)(s.p,{children:["The Embassy executor enables ",(0,t.jsx)(s.strong,{children:"cooperative multitasking"})," where tasks voluntarily yield control during I/O operations or delays. This approach ensures:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Responsive UI"})," - Touch events processed within 50ms polling intervals"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Continuous monitoring"})," - Sensors operate independently without blocking other tasks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Efficient resource usage"})," - No preemptive context switching overhead"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Deterministic timing"})," - Precise control over measurement windows and data transmission"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Memory Management"})}),"\n",(0,t.jsxs)(s.p,{children:["The system uses ",(0,t.jsx)(s.strong,{children:"static allocation"})," exclusively through ",(0,t.jsx)(s.code,{children:"heapless"})," data structures and ",(0,t.jsx)(s.code,{children:"static_cell"})," for async resources."]}),"\n",(0,t.jsx)(s.h3,{id:"software-diagram",children:"Software Diagram"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Software Architecture",src:i(92048).A+"",title:"VitalPi Software Architecture"})}),"\n",(0,t.jsx)(s.h2,{id:"links",children:"Links"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://www.analog.com/media/en/technical-documentation/data-sheets/max30102.pdf",children:"Datasheet for MAX30102"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://crates.io/crates/embedded-canvas",children:"Embedded-canvas for better update on the screen"})}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},24222:(e,s,i)=>{i.d(s,{A:()=>r});const r=i.p+"assets/images/architecture-22b1adbe7877daa4a7fbcd8310313388.svg"},83369:(e,s,i)=>{i.d(s,{A:()=>r});const r=i.p+"assets/images/hardware_1-1a243e3397467d6cb4b8dea6268288d7.webp"},89100:(e,s,i)=>{i.d(s,{A:()=>r});const r=i.p+"assets/images/hardware_2-78930b25809867c8b4fef88346d1cb7f.webp"},80335:(e,s,i)=>{i.d(s,{A:()=>r});const r=i.p+"assets/images/hardware_3-4a7f2e4bd565e972bf88a94f35ab5eba.webp"},78297:(e,s,i)=>{i.d(s,{A:()=>r});const r=i.p+"assets/images/kicad-9023310251a0ad97735f6599ba926aaf.svg"},92048:(e,s,i)=>{i.d(s,{A:()=>r});const r=i.p+"assets/images/software-5e7faa52df402db9d7569114fffbd07c.svg"},28453:(e,s,i)=>{i.d(s,{R:()=>d,x:()=>a});var r=i(96540);const t={},n=r.createContext(t);function d(e){const s=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(n.Provider,{value:s},e.children)}}}]);