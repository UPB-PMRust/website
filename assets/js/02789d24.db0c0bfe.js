"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5721],{64776:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>o,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"project/2025/laurentiu.stavar/index","title":"BlackJack Machine","description":"A singleplayer card game powered by a Raspberry Pi Pico 2 and Rust.","source":"@site/versioned_docs/version-acs_cc/project/2025/laurentiu.stavar/index.md","sourceDirName":"project/2025/laurentiu.stavar","slug":"/project/2025/laurentiu.stavar/","permalink":"/docs/acs_cc/project/2025/laurentiu.stavar/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-acs_cc/project/2025/laurentiu.stavar/index.md","tags":[],"version":"acs_cc","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MyRoboAssistant","permalink":"/docs/acs_cc/project/2025/kostiantyn.savchuk/"},"next":{"title":"Weather Window","permalink":"/docs/acs_cc/project/2025/lavinia.tudor0603/"}}');var t=r(74848),n=r(28453);const d={},l="BlackJack Machine",a={},c=[{value:"Description",id:"description",level:2},{value:"Features:",id:"features",level:3},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Game Flow Summary:",id:"game-flow-summary",level:3},{value:"LED &amp; OLED Usage",id:"led--oled-usage",level:3},{value:"Block Scheme",id:"block-scheme",level:3},{value:"Log",id:"log",level:2},{value:"Week 5 \u2013 11 May",id:"week-5--11-may",level:3},{value:"Week 12 \u2013 18 May",id:"week-12--18-may",level:3},{value:"Week 19 \u2013 25 May",id:"week-19--25-may",level:3},{value:"Hardware",id:"hardware",level:2},{value:"Schematics",id:"schematics",level:2},{value:"Photos and videos",id:"photos-and-videos",level:2},{value:"Bill of Materials",id:"bill-of-materials",level:2},{value:"Software",id:"software",level:2},{value:"Links",id:"links",level:2}];function h(e){const s={a:"a",admonition:"admonition",br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"blackjack-machine",children:"BlackJack Machine"})}),"\n",(0,t.jsx)(s.p,{children:"A singleplayer card game powered by a Raspberry Pi Pico 2 and Rust."}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Author"}),": Stav\u0103r Lauren\u021biu-Cristian",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"GitHub Project Link"}),": ",(0,t.jsx)(s.a,{href:"https://github.com/UPB-PMRust-Students/proiect-StavarLaurentiu",children:"https://github.com/UPB-PMRust-Students/proiect-StavarLaurentiu"})]})}),"\n",(0,t.jsx)(s.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(s.p,{children:["A fully interactive BlackJack game machine built on a ",(0,t.jsx)(s.strong,{children:"Raspberry Pi Pico 2 - RP2350A"}),", using the ",(0,t.jsx)(s.strong,{children:"Rust"})," programming language and Embassy async framework."]}),"\n",(0,t.jsx)(s.h3,{id:"features",children:"Features:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Uses three buttons for game actions: ",(0,t.jsx)(s.strong,{children:"HIT"}),", ",(0,t.jsx)(s.strong,{children:"STAND"})," and ",(0,t.jsx)(s.strong,{children:"START GAME"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Displays dealer and player cards across ",(0,t.jsx)(s.strong,{children:'8 OLED 0.96" screens'}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Includes ",(0,t.jsx)(s.strong,{children:'1 OLED 0.96" display'})," dedicated to real-time game state messages."]}),"\n",(0,t.jsxs)(s.li,{children:["Uses ",(0,t.jsx)(s.strong,{children:"2 RGB LEDs"})," to indicate turns and round outcomes."]}),"\n",(0,t.jsxs)(s.li,{children:["Utilizes a ",(0,t.jsx)(s.strong,{children:"TCA9548A I2C multiplexer"})," to manage identical OLED addresses."]}),"\n",(0,t.jsx)(s.li,{children:"Executes full BlackJack logic: card drawing, user input, dealer logic, and win conditions."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,t.jsx)(s.p,{children:"This project combines microcontroller programming, real-time interaction, and game logic design. My goal was to build something fun and visually interactive, while pushing the limits of what I learned in embedded systems and Rust. The integration of I2C multiplexing, OLED control, and user inputs made this an ideal project to consolidate theory into a challenging and rewarding practical application."}),"\n",(0,t.jsx)(s.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"Raspberry Pi Pico 2 - RP2350A"})," acts as the central unit, managing peripherals and orchestrating the game flow."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Buttons"})," (GPIO): detect user input (HIT / STAND / START GAME)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"RGB LEDs"})," (PWM): blink or hold to indicate whose turn or the round outcome."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:'9 OLED Display 0.96"s'})," (I2C): show player/dealer cards and the game state."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"TCA9548A I2C MUX"}),": used to route communication between the Pico and the OLEDs sharing the same I2C address."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"game-flow-summary",children:"Game Flow Summary:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Startup"}),": OLED instructs user to press START."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Dealer draws 2 cards"})," \u2013 LED blinks \u2013 game state updates."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Player draws 2 cards"})," \u2013 LED blinks \u2013 game state updates."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Player phase"}),": can HIT (get card) or STAND (end turn)."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"If player busts"}),": game ends."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Else"}),": dealer draws to at least 17."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Compare scores"}),": show result and reset after 5 seconds."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"led--oled-usage",children:"LED & OLED Usage"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Blinking LEDs indicate ",(0,t.jsx)(s.strong,{children:"active turn"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Solid yellow LED indicates ",(0,t.jsx)(s.strong,{children:"winner"})," or ",(0,t.jsx)(s.strong,{children:"draw"}),"."]}),"\n",(0,t.jsx)(s.li,{children:"OLEDs visually show each card and game progress."}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"block-scheme",children:"Block Scheme"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"diagram",src:r(93073).A+"",width:"811",height:"591"})}),"\n",(0,t.jsx)(s.h2,{id:"log",children:"Log"}),"\n",(0,t.jsx)(s.h3,{id:"week-5--11-may",children:"Week 5 \u2013 11 May"}),"\n",(0,t.jsx)(s.p,{children:"Finished the setup. Implemented buttons and LEDs functionalities. Also made the Game State OLED work properly."}),"\n",(0,t.jsx)(s.h3,{id:"week-12--18-may",children:"Week 12 \u2013 18 May"}),"\n",(0,t.jsx)(s.p,{children:"Implemented all the game logic(cards, deck, hands, state, etc). Started working with the I2C MUX and the 8 OLEDs for the cards display. The only thing left to do is showing the cards on the OLEDs(they are already working)."}),"\n",(0,t.jsx)(s.h3,{id:"week-19--25-may",children:"Week 19 \u2013 25 May"}),"\n",(0,t.jsx)(s.p,{children:"Added 2D cards images display functionality. Finished the README. Updated the list of libraries that I used(I deleted some of them that I ended up not using). Also updated Cargo.toml file. Refactored the code. Deleted dead code and fixed some warnings."}),"\n",(0,t.jsx)(s.h2,{id:"hardware",children:"Hardware"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Raspberry Pi Pico 2 - RP2350A"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Main microcontroller; handles game logic, I2C communication, and peripheral control."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"2 Push Buttons (HIT & STAND)"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"User input; GPIO with pull-ups."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"2 RGB LEDs"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Visual indicators for player/dealer turn and result status."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:'9 OLED 0.96" Displays (128x64)'})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Display game content (cards and messages). All share the same I2C address."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"TCA9548A I2C Multiplexer"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Routes signals to individual OLEDs as they can't share the bus directly."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"schematics",children:"Schematics"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"diagram",src:r(90196).A+"",width:"1024",height:"724"})}),"\n",(0,t.jsx)(s.h2,{id:"photos-and-videos",children:"Photos and videos"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"diagram",src:r(78283).A+"",width:"794",height:"768"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"diagram",src:r(76394).A+"",width:"432",height:"768"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"diagram",src:r(80661).A+"",width:"432",height:"768"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://drive.google.com/file/d/1Ra2BIl7wVw8DB3zTOpI6kNC0RgWqssET/view?usp=sharing",children:"https://drive.google.com/file/d/1Ra2BIl7wVw8DB3zTOpI6kNC0RgWqssET/view?usp=sharing"})}),"\n",(0,t.jsx)(s.h2,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Device"}),(0,t.jsx)(s.th,{children:"Usage"}),(0,t.jsx)(s.th,{children:"Price"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://datasheets.raspberrypi.com/picow/pico-2-w-datasheet.pdf",children:"Raspberry Pi Pico 2"})}),(0,t.jsx)(s.td,{children:"Microcontroller"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/13327-raspberry-pi-pico-2-w.html?search_query=raspberry+pi+pico+2&results=36",children:"40 RON x 2"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.ti.com/lit/ds/symlink/tca9548a.pdf",children:"TCA9548A I2C MUX"})}),(0,t.jsx)(s.td,{children:"OLED Routing"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/power-multiplexers/1692-tca9548a-i2c-multiplexer-module.html?search_query=Modul+Multiplexor+I2C+TCA9548A&results=1",children:"20 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.a,{href:"https://www.vishay.com/docs/37902/oled128o064dbpp3n00000.pdf",children:"OLED 128x64 Displays"})," \xd7 9"]}),(0,t.jsx)(s.td,{children:"Visual display"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.bitmi.ro/componente-electronice/ecran-oled-0-96-cu-interfata-iic-i2c-10488.html",children:"19 RON \xd7 9"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"RGB LED \xd7 2"}),(0,t.jsx)(s.td,{children:"Player/Dealer Indicators"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.bitmi.ro/module-electronice/modul-led-rgb-3-culori-10401.html",children:"2 RON \xd7 2"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Push Buttons \xd7 3"}),(0,t.jsx)(s.td,{children:"Game Inputs"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/buttons-and-switches/1115-white-button-with-round-cover.html?search_query=buttons&results=259",children:"2 RON \xd7 3"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Breadboard"}),(0,t.jsx)(s.td,{children:"Connectivity"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.optimusdigital.ro/en/breadboards/8-breadboard-hq-830-points.html?search_query=breadboard&results=363",children:"10 RON"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Jumpers"}),(0,t.jsx)(s.td,{children:"Connectivity"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://www.bitmi.ro/componente-electronice/40-fire-dupont-tata-mama-30cm-10504.html",children:"8 RON"})})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"TOTAL: ~300 RON"}),"\n",(0,t.jsx)(s.h2,{id:"software",children:"Software"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Library"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Usage"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-rp"})}),(0,t.jsx)(s.td,{children:"RP2350 HAL for Raspberry Pi Pico 2"}),(0,t.jsx)(s.td,{children:"GPIO control, I2C communication, async device management"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-executor"})}),(0,t.jsx)(s.td,{children:"Async/await executor for embedded systems"}),(0,t.jsx)(s.td,{children:"Task scheduling and async runtime"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-time"})}),(0,t.jsx)(s.td,{children:"Time management for Embassy"}),(0,t.jsx)(s.td,{children:"Delays, timers, and timeout handling"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-futures"})}),(0,t.jsx)(s.td,{children:"Future utilities for embedded systems"}),(0,t.jsx)(s.td,{children:"Select operations for button handling"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://docs.rs/ssd1306/latest/ssd1306/",children:"ssd1306"})}),(0,t.jsx)(s.td,{children:"SSD1306 OLED Display Driver"}),(0,t.jsx)(s.td,{children:"Control 9 OLED displays for cards and game state"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://docs.rs/embedded-graphics/latest/embedded_graphics/",children:"embedded-graphics"})}),(0,t.jsx)(s.td,{children:"2D Graphics Library"}),(0,t.jsx)(s.td,{children:"Text rendering and display formatting"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/rust-embedded/heapless",children:"heapless"})}),(0,t.jsx)(s.td,{children:"Collections without allocation"}),(0,t.jsx)(s.td,{children:"Fixed-capacity vectors and strings for no_std"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal"})}),(0,t.jsx)(s.td,{children:"Hardware Abstraction Layer"}),(0,t.jsx)(s.td,{children:"Standard traits for I2C and GPIO operations"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://docs.rs/rand/latest/rand/",children:"rand"})}),(0,t.jsx)(s.td,{children:"Random number generation"}),(0,t.jsx)(s.td,{children:"Card deck shuffling with small_rng feature"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.a,{href:"https://github.com/knurling-rs/defmt",children:"defmt"})," + ",(0,t.jsx)(s.a,{href:"https://github.com/knurling-rs/defmt",children:"defmt-rtt"})]}),(0,t.jsx)(s.td,{children:"Efficient logging framework"}),(0,t.jsx)(s.td,{children:"Real-time debug output over RTT"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://crates.io/crates/panic-probe",children:"panic-probe"})}),(0,t.jsx)(s.td,{children:"Panic handler for embedded"}),(0,t.jsx)(s.td,{children:"Debug-friendly panic messages with defmt"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"https://docs.rs/cortex-m-rt/latest/cortex_m_rt/",children:"cortex-m-rt"})}),(0,t.jsx)(s.td,{children:"Cortex-M runtime"}),(0,t.jsx)(s.td,{children:"Boot sequence and interrupt vector setup"})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"links",children:"Links"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://bicyclecards.com/how-to-play/blackjack/",children:"BlackJack rules"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://www.youtube.com/watch?v=Ts9JXbMvfTQ&t=443s",children:"Raspberry Pi Pico Tutorial - SSD1306 I2C OLED DISPLAY"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://www.freepik.com/free-vector/complete-deck-playing-cards_414486592.htm#fromView=keyword&page=1&position=11&uuid=d15e84b6-c2e6-40ef-9b00-a3c1ec8341eb&query=Playing+Card",children:"Playing cards images"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"https://www.youtube.com/watch?v=wqyHbQvcoWw",children:"Using I2C MUX with OLEDs"})}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},90196:(e,s,r)=>{r.d(s,{A:()=>i});const i=r.p+"assets/images/KiCad-208c1ab73815aa7cd3d88b71a63e7a39.svg"},93073:(e,s,r)=>{r.d(s,{A:()=>i});const i=r.p+"assets/images/block_scheme-9ba3ae21565ae1f20c9b6ce2b36e6d28.webp"},78283:(e,s,r)=>{r.d(s,{A:()=>i});const i=r.p+"assets/images/photo1-91ec84412f5f400e741b188510a33796.webp"},76394:(e,s,r)=>{r.d(s,{A:()=>i});const i=r.p+"assets/images/photo2-0c1887bb0009354386e4cfb29e98ae4b.webp"},80661:(e,s,r)=>{r.d(s,{A:()=>i});const i=r.p+"assets/images/photo3-610ae704f5f29d56fcb9ca01b4a25988.webp"},28453:(e,s,r)=>{r.d(s,{R:()=>d,x:()=>l});var i=r(96540);const t={},n=i.createContext(t);function d(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);