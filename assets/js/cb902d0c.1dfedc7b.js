"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9878],{6996:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"project/2025/carla_maria.rusu/index","title":"Audio Player with Raspberry Pi Pico 2W","description":"Audio player for headphones or devices with 3.5 jack.","source":"@site/versioned_docs/version-acs_cc/project/2025/carla_maria.rusu/index.md","sourceDirName":"project/2025/carla_maria.rusu","slug":"/project/2025/carla_maria.rusu/","permalink":"/docs/acs_cc/project/2025/carla_maria.rusu/","draft":false,"unlisted":false,"editUrl":"https://www.github.com/upb-pmrust/website/edit/main/website/versioned_docs/version-acs_cc/project/2025/carla_maria.rusu/index.md","tags":[],"version":"acs_cc","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hand controlled Wi-Fi car","permalink":"/docs/acs_cc/project/2025/bogdan_florin.popa/"},"next":{"title":"Automatic Irrigation System","permalink":"/docs/acs_cc/project/2025/carmen.murarescu/"}}');var d=r(74848),s=r(28453);const t={},l="Audio Player with Raspberry Pi Pico 2W",a={},c=[{value:"Description",id:"description",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Components Overview",id:"components-overview",level:3},{value:"Interconnection",id:"interconnection",level:3},{value:"Diagram",id:"diagram",level:3},{value:"Log",id:"log",level:2},{value:"Week 5 - 11 May",id:"week-5---11-may",level:3},{value:"Week 12 - 18 May",id:"week-12---18-may",level:3},{value:"SD Card fix",id:"sd-card-fix",level:4},{value:"Week 19 - 25 May",id:"week-19---25-may",level:3},{value:"Hardware Design",id:"hardware-design",level:2},{value:"Hardware Description",id:"hardware-description",level:3},{value:"Schematic",id:"schematic",level:3},{value:"Photos",id:"photos",level:3},{value:"Wiring at the hardware deadline",id:"wiring-at-the-hardware-deadline",level:4},{value:"Re-wiring after sd card fix",id:"re-wiring-after-sd-card-fix",level:4},{value:"Menu UI",id:"menu-ui",level:4},{value:"Playback UI",id:"playback-ui",level:4},{value:"Bill of Materials",id:"bill-of-materials",level:3},{value:"Software",id:"software",level:2},{value:"Dependencies Overview",id:"dependencies-overview",level:3},{value:"Links",id:"links",level:2}];function h(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.header,{children:(0,d.jsx)(i.h1,{id:"audio-player-with-raspberry-pi-pico-2w",children:"Audio Player with Raspberry Pi Pico 2W"})}),"\n",(0,d.jsx)(i.p,{children:"Audio player for headphones or devices with 3.5 jack."}),"\n",(0,d.jsx)(i.admonition,{type:"info",children:(0,d.jsxs)(i.p,{children:[(0,d.jsx)(i.strong,{children:"Author"}),": Rusu Carla-Maria ",(0,d.jsx)(i.br,{}),"\n",(0,d.jsx)(i.strong,{children:"GitHub Project Link"}),": ",(0,d.jsx)(i.a,{href:"https://github.com/UPB-PMRust-Students/proiect-rusucarla",children:"link_to_github"})]})}),"\n",(0,d.jsx)(i.h2,{id:"description",children:"Description"}),"\n",(0,d.jsx)(i.p,{children:"This project implements a compact WAV audio player using the Raspberry Pi Pico 2W microcontroller.\nThe audio files are stored on a microSD card, read via SPI, and played through an I2S DAC (UDA1334A) connected to a 3.5mm headphone jack.\nThe user can use the push buttons and the rotary encoder to customize the experience."}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"motivation",children:"Motivation"}),"\n",(0,d.jsx)(i.p,{children:"The motivation for choosing this project was to explore embedded audio playback using Rust and Embassy on the Raspberry Pi Pico 2W.\nThe goal was to build a music player while learning low-level embedded I/O, SPI, I2S, and async execution using Rust."}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"architecture",children:"Architecture"}),"\n",(0,d.jsx)(i.h3,{id:"components-overview",children:"Components Overview"}),"\n",(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"Component"}),(0,d.jsx)(i.th,{children:"Responsibility"})]})}),(0,d.jsxs)(i.tbody,{children:[(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"Audio Handler"}),(0,d.jsx)(i.td,{children:"Reads WAV files and streams audio via I2S to the DAC"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"SPI Handler"}),(0,d.jsx)(i.td,{children:"Interfaces with the SD card to access audio files and with the LCD to display information"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"UI"}),(0,d.jsx)(i.td,{children:"Displays UI (e.g., file list, song name, progress)"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"Input Handler"}),(0,d.jsx)(i.td,{children:"Processes rotary encoder and buttons"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"Playback Controller"}),(0,d.jsx)(i.td,{children:"Controls playback state (play/pause, skip, etc.)"})]})]})]}),"\n",(0,d.jsx)(i.h3,{id:"interconnection",children:"Interconnection"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Input Handler dictates the state of the Playback Controller"}),"\n",(0,d.jsx)(i.li,{children:"Playback Controller coordinates with Audio Manager and SPI Handler to stream audio."}),"\n",(0,d.jsx)(i.li,{children:"Audio Handler uses SPI Handler to get WAV file data."}),"\n",(0,d.jsx)(i.li,{children:"Playback Controller notifies UI to update the screen."}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"diagram",children:"Diagram"}),"\n",(0,d.jsx)(i.mermaid,{value:"graph TD\n    InputHandler[Input Handler - Buttons & Encoder]\n    PlaybackController[Playback Controller]\n    AudioHandler[Audio Manager]\n    SPIHandler[SPI Handler - SD & LCD Access]\n    UI[UI]\n\n    InputHandler --\x3e PlaybackController\n    PlaybackController --\x3e AudioHandler\n    AudioHandler --\x3e SPIHandler\n    PlaybackController --\x3e UI"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"log",children:"Log"}),"\n",(0,d.jsx)(i.h3,{id:"week-5---11-may",children:"Week 5 - 11 May"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Assembled the hardware setup on the breadboard:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Connected the Raspberry Pi Pico 2W."}),"\n",(0,d.jsx)(i.li,{children:"Mounted the UDA1334A DAC, SD card module (SPI), LCD display, push buttons, and rotary encoder."}),"\n",(0,d.jsx)(i.li,{children:"Carefully routed all jumper wires to avoid conflicts, ensuring SPI and I2S lines were correctly mapped."}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Wrote individual test functions for each hardware component:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Verified SPI communication with the LCD and SD card."}),"\n",(0,d.jsx)(i.li,{children:"Tested I2S output to the DAC using dummy sine wave data."}),"\n",(0,d.jsx)(i.li,{children:"Checked button press detection and rotary encoder rotation."}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Started experiencing SD card reliability issues:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Sometimes initialization would fail or return incomplete filesystem data."}),"\n",(0,d.jsx)(i.li,{children:"Logging output revealed intermittent card detection failures."}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Started the main function which (should) combines all functionalities"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"week-12---18-may",children:"Week 12 - 18 May"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Implemented dedicated SD card diagnostics:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Created test routines to check for card health. And eventually reseting."}),"\n",(0,d.jsx)(i.li,{children:"Integrated logging to display volume and partition status, with detailed error handling."}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Combined individual modules into a single integrated player prototype:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Managed concurrent use of SPI bus for both SD card and LCD."}),"\n",(0,d.jsx)(i.li,{children:"Synchronized SD card read with audio playback over I2S."}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Encountered new reliability issues when combining all components:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"SD card will fail mid-playback or block access after a few operations or just not be initialized with the right size"}),"\n",(0,d.jsx)(i.li,{children:"Not sure about the main culprit"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h4,{id:"sd-card-fix",children:"SD Card fix"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["Implemented major improvements to SD card reliability:","\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["Opened an ",(0,d.jsx)(i.a,{href:"https://github.com/UPB-PMRust/questions/issues/32",children:"issue"})," to try and get help"]}),"\n",(0,d.jsx)(i.li,{children:"Moved SD card to a dedicated SPI1 bus to reduce interference from LCD"}),"\n",(0,d.jsx)(i.li,{children:"Created specialized functions for card health checking and reinitialization"}),"\n",(0,d.jsx)(i.li,{children:"Implemented progressive speed testing from 400kHz to find optimal performance"}),"\n",(0,d.jsx)(i.li,{children:"Added proper error recovery mechanisms with multiple retry attempts"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Completely restructured the codebase to improve maintainability and organization:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Split monolithic code into meaningful modules (player.rs, wav.rs, sd_card.rs)"}),"\n",(0,d.jsx)(i.li,{children:"Moved static components to lib.rs for better access across the application"}),"\n",(0,d.jsx)(i.li,{children:"Created proper abstractions between audio, storage, and display layers"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Designed robust filesystem access patterns:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Created borrowable bus system for dynamic SD configuration"}),"\n",(0,d.jsx)(i.li,{children:"Implemented controlled mutex access to shared SPI resources"}),"\n",(0,d.jsx)(i.li,{children:"Added proper error handling for volume and directory operations"}),"\n",(0,d.jsx)(i.li,{children:"Created sequential initialization with proper cleanup between operations"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Developed user experience enhancements:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Added volume control through rotary encoder with visual feedback"}),"\n",(0,d.jsx)(i.li,{children:"Created rate limiting (40ms) to prevent overwhelming the system"}),"\n",(0,d.jsx)(i.li,{children:"Implemented scrollable file list to handle multiple audio files"}),"\n",(0,d.jsx)(i.li,{children:"Added dynamic UI updates showing file information and playback status"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Enhanced audio playback controls and feedback:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Added pause/resume functionality with debouncing"}),"\n",(0,d.jsx)(i.li,{children:"Created proper audio buffer management with silence insertion"}),"\n",(0,d.jsx)(i.li,{children:"Implemented state tracking with visual indicators"}),"\n",(0,d.jsx)(i.li,{children:"Added file verification with sample rate and duration display"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"week-19---25-may",children:"Week 19 - 25 May"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Implemented comprehensive navigation between audio files:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Added skip forward/backward functionality with dedicated buttons"}),"\n",(0,d.jsx)(i.li,{children:"Created PlaybackResult enum to enable seamless track-to-track navigation"}),"\n",(0,d.jsx)(i.li,{children:"Implemented proper file index management with wrap-around behavior"}),"\n",(0,d.jsx)(i.li,{children:"Added transition animations and feedback between tracks"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Enhanced the user interface with improved file name display:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Created a dual-filename system to handle FAT 8.3 limitations"}),"\n",(0,d.jsx)(i.li,{children:"Developed custom mapping from short filenames to human-readable display names"}),"\n",(0,d.jsx)(i.li,{children:"Added title and artist extraction from filenames"}),"\n",(0,d.jsx)(i.li,{children:"Improved layout to show more information about current track"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Fixed critical timing and display issues:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Solved UI flickering by reducing update frequency and implementing partial updates"}),"\n",(0,d.jsx)(i.li,{children:"Fixed timer reset issues when resuming from pause"}),"\n",(0,d.jsx)(i.li,{children:"Added proper time counting with accurate pause duration tracking"}),"\n",(0,d.jsx)(i.li,{children:"Implemented throttling for encoder events to prevent SD card interference"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Created comprehensive documentation:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Added detailed KiCad schematics for hardware layout"}),"\n",(0,d.jsx)(i.li,{children:"Created Mermaid diagrams showing data flow and component relationships"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(i.li,{children:["\n",(0,d.jsx)(i.p,{children:"Performed extensive optimization and cleanup:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Found optimal 16 MHz setting for better rotary encoder responsiveness"}),"\n",(0,d.jsx)(i.li,{children:"Defined strict volume levels (MUTE through MAX) to limit SD interference"}),"\n",(0,d.jsx)(i.li,{children:"Created exit button handling for proper application navigation"}),"\n",(0,d.jsx)(i.li,{children:"Removed dead code"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"hardware-design",children:"Hardware Design"}),"\n",(0,d.jsx)(i.h3,{id:"hardware-description",children:"Hardware Description"}),"\n",(0,d.jsx)(i.p,{children:"The following hardware was used:"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsx)(i.li,{children:"Raspberry Pi Pico 2W"}),"\n",(0,d.jsx)(i.li,{children:"UDA1334A I2S DAC with 3.5mm jack socket"}),"\n",(0,d.jsx)(i.li,{children:"LCD with built-in SD slot (will see if this is the best option)"}),"\n",(0,d.jsx)(i.li,{children:"Rotary Encoder"}),"\n",(0,d.jsx)(i.li,{children:"3 push buttons"}),"\n",(0,d.jsx)(i.li,{children:"Breadboards and jumper wires"}),"\n"]}),"\n",(0,d.jsx)(i.h3,{id:"schematic",children:"Schematic"}),"\n",(0,d.jsx)(i.p,{children:"Tried to do something in Kicad (not for dark mode)"}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.img,{alt:"kicad_schematic",src:r(18209).A+"",width:"1123",height:"794"})}),"\n",(0,d.jsx)(i.h3,{id:"photos",children:"Photos"}),"\n",(0,d.jsx)(i.h4,{id:"wiring-at-the-hardware-deadline",children:"Wiring at the hardware deadline"}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.img,{alt:"photo_of_hardware",src:r(55193).A+"",width:"1012",height:"720"})}),"\n",(0,d.jsx)(i.h4,{id:"re-wiring-after-sd-card-fix",children:"Re-wiring after sd card fix"}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.img,{alt:"new_wiring",src:r(95156).A+"",width:"920",height:"768"})}),"\n",(0,d.jsx)(i.h4,{id:"menu-ui",children:"Menu UI"}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.img,{alt:"menu_ui",src:r(89909).A+"",width:"1024",height:"565"})}),"\n",(0,d.jsx)(i.h4,{id:"playback-ui",children:"Playback UI"}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.img,{alt:"playback_ui",src:r(19843).A+"",width:"1024",height:"583"})}),"\n",(0,d.jsx)(i.h3,{id:"bill-of-materials",children:"Bill of Materials"}),"\n",(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"Item"}),(0,d.jsx)(i.th,{children:"Quantity"}),(0,d.jsx)(i.th,{children:"Unit Price (RON)"}),(0,d.jsx)(i.th,{children:"Total (RON)"}),(0,d.jsx)(i.th,{children:"Usage"})]})}),(0,d.jsxs)(i.tbody,{children:[(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/13327-raspberry-pi-pico-2-w.html?search_query=Raspberry+Pi+Pico+2W+&results=36",children:"Raspberry Pi Pico 2W"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"39.66"}),(0,d.jsx)(i.td,{children:"39.66"}),(0,d.jsx)(i.td,{children:"Main controller"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/raspberry-pi-boards/13327-raspberry-pi-pico-2-w.html?search_query=Raspberry+Pi+Pico+2W+&results=36",children:"Raspberry Pi Pico 2W(debug / Picoprobe)"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"39.66"}),(0,d.jsx)(i.td,{children:"39.66"}),(0,d.jsx)(i.td,{children:"Used for SWD debugging"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://ardushop.ro/en/modules/933-dac-module-1334-uda1334a-i2s-dac-audio-stereo-decoder-module-board-for-arduino-33v-5v-6427854012432.html",children:"UDA1334A I2S DAC Module"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"56.76"}),(0,d.jsx)(i.td,{children:"56.76"}),(0,d.jsx)(i.td,{children:"Audio output module"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/lcds/1311-modul-lcd-spi-de-18-128x160.html?search_query=LCD+SPI+Display+1.8%22+%28128x160%29&results=4",children:'LCD SPI Display 1.8" (128x160) with SD slot'})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"28.99"}),(0,d.jsx)(i.td,{children:"28.99"}),(0,d.jsx)(i.td,{children:"Used for UI and SD (via SPI)"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/buttons-and-switches/1115-white-button-with-round-cover.html?search_query=push&results=140",children:"Push Button (white round cap)"})}),(0,d.jsx)(i.td,{children:"3"}),(0,d.jsx)(i.td,{children:"1.99"}),(0,d.jsx)(i.td,{children:"5.97"}),(0,d.jsx)(i.td,{children:"Controls"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/touch-sensors/7150-rotary-encoder-module.html?search_query=rotary+encoder&results=11",children:"Rotary Encoder Module"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"4.99"}),(0,d.jsx)(i.td,{children:"4.99"}),(0,d.jsx)(i.td,{children:"Controls"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/potentiometers/1886-10k-stereo-potentiometer.html?search_query=potentiometer&results=225",children:"10k Stereo Potentiometer"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"1.99"}),(0,d.jsx)(i.td,{children:"1.99"}),(0,d.jsx)(i.td,{children:"Analog Control (ADC input)"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/breadboards/8-breadboard-hq-830-points.html?search_query=bread+board&results=420",children:"Breadboard HQ (830 points)"})}),(0,d.jsx)(i.td,{children:"2"}),(0,d.jsx)(i.td,{children:"9.98"}),(0,d.jsx)(i.td,{children:"19.96"}),(0,d.jsx)(i.td,{children:"For main Pico + Picoprobe wiring"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/pin-headers/463-colored-40p-254-mm-pitch-male-pin-header-white.html?search_query=Header+pins+%282.54+mm%2C+40p&results=8",children:"Header pins (2.54 mm, 40p)"})}),(0,d.jsx)(i.td,{children:"2"}),(0,d.jsx)(i.td,{children:"0.99"}),(0,d.jsx)(i.td,{children:"1.98"}),(0,d.jsx)(i.td,{children:"For soldering Pico and accessories"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/pin-headers/1285-header-de-pini-mama-40p-254-mm-separabil.html?search_query=Header+pins+%282.54+mm%2C+40p&results=8",children:"Female Breakable Header (40p)"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"2.56"}),(0,d.jsx)(i.td,{children:"2.56"}),(0,d.jsx)(i.td,{children:"Extra connectivity (LCD/SD)"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/wires-without-connectors/899-set-de-fire-pentru-breadboard-rigide.html?search_query=rigid&results=151",children:"Breadboard rigid wires"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"12.49"}),(0,d.jsx)(i.td,{children:"12.49"}),(0,d.jsx)(i.td,{children:"Neat wiring on breadboard"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://www.optimusdigital.ro/en/wires-with-connectors/12-breadboard-jumper-wire-set.html?search_query=jumper&results=237",children:"Breadboard jumper wires"})}),(0,d.jsx)(i.td,{children:"1"}),(0,d.jsx)(i.td,{children:"7.99"}),(0,d.jsx)(i.td,{children:"7.99"}),(0,d.jsx)(i.td,{children:"General-purpose jumpers"})]})]})]}),"\n",(0,d.jsx)(i.p,{children:"Total Estimated Cost: 229.60 RON (for now)"}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"software",children:"Software"}),"\n",(0,d.jsx)(i.p,{children:"To-do : complete later when I've finished"}),"\n",(0,d.jsx)(i.h3,{id:"dependencies-overview",children:"Dependencies Overview"}),"\n",(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"Library"}),(0,d.jsx)(i.th,{children:"Description"}),(0,d.jsx)(i.th,{children:"Usage"})]})}),(0,d.jsxs)(i.tbody,{children:[(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy"})}),(0,d.jsx)(i.td,{children:"Async embedded framework"}),(0,d.jsx)(i.td,{children:"Core runtime for async tasks and peripherals"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/embassy-rs/embassy",children:"embassy-rp"})}),(0,d.jsx)(i.td,{children:"HAL for Raspberry Pi Pico (RP2040)"}),(0,d.jsx)(i.td,{children:"Controls GPIOs, SPI, I2S, etc."})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/embedded-graphics/embedded-graphics",children:"embedded-graphics"})}),(0,d.jsx)(i.td,{children:"2D graphics library"}),(0,d.jsx)(i.td,{children:"Used for drawing text and shapes on LCD"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/almindor/mipidsi",children:"mipidsi"})}),(0,d.jsx)(i.td,{children:"Generic MIPI DSI display driver"}),(0,d.jsx)(i.td,{children:"Driver for ST7735 LCD"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/almindor/display-interface",children:"display-interface-spi"})}),(0,d.jsx)(i.td,{children:"SPI display abstraction"}),(0,d.jsx)(i.td,{children:"Connects the embedded-graphics to SPI-based displays"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/rust-embedded-community/embedded-sdmmc-rs",children:"embedded-sdmmc"})}),(0,d.jsx)(i.td,{children:"FAT filesystem over SD card"}),(0,d.jsxs)(i.td,{children:["Used to read ",(0,d.jsx)(i.code,{children:".wav"})," files from SD card"]})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/rust-embedded/embedded-hal",children:"embedded-hal"})}),(0,d.jsx)(i.td,{children:"Traits for embedded devices"}),(0,d.jsx)(i.td,{children:"Base for SPI, I2S, ADC, GPIO, etc."})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/knurling-rs/defmt",children:"defmt"})}),(0,d.jsx)(i.td,{children:"Logging crate for embedded"}),(0,d.jsx)(i.td,{children:"For debugging and structured logs"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:(0,d.jsx)(i.a,{href:"https://github.com/NeoBirth/micromath",children:"micromath"})}),(0,d.jsx)(i.td,{children:"Lightweight math functions"}),(0,d.jsx)(i.td,{children:"Used for simulations of sound waves"})]})]})]}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"links",children:"Links"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.a,{href:"https://github.com/embassy-rs/embassy/tree/93ff90db04f06316f0992b65a0319ebdf74ce5c4/embassy-rp/src/pio_programs",children:"PIO Programs"})," : Helped me with drivers for I2S and Rotary Encoder"]}),"\n"]})]})}function o(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},18209:(e,i,r)=>{r.d(i,{A:()=>n});const n=r.p+"assets/images/Audio_Player-e11c736cad65eb761030c38821ec58f2.svg"},89909:(e,i,r)=>{r.d(i,{A:()=>n});const n=r.p+"assets/images/menu_ui-b20caa57800f7b6c41c9269f05ebea1b.webp"},95156:(e,i,r)=>{r.d(i,{A:()=>n});const n=r.p+"assets/images/new_wiring-02a38643a6f9c495dc1a19f406859fd3.webp"},55193:(e,i,r)=>{r.d(i,{A:()=>n});const n=r.p+"assets/images/photo_hardware_deadline-f026baddb8569ebd5f1297b5fc77d170.webp"},19843:(e,i,r)=>{r.d(i,{A:()=>n});const n=r.p+"assets/images/playback_ui-8aa8a0d1052824e5d6721152101734d4.webp"},28453:(e,i,r)=>{r.d(i,{R:()=>t,x:()=>l});var n=r(96540);const d={},s=n.createContext(d);function t(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);